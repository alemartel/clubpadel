warning: in the working copy of 'server/src/api.ts', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/server/src/api.ts b/server/src/api.ts[m
[1mindex 63b4f69..07e4022 100644[m
[1m--- a/server/src/api.ts[m
[1m+++ b/server/src/api.ts[m
[36m@@ -23,7 +23,7 @@[m [mimport {[m
   type NewTeamMember,[m
   type NewTeamAvailability,[m
 } from "./schema/teams";[m
[31m-import { eq, and, ne, sql, notInArray, desc } from "drizzle-orm";[m
[32m+[m[32mimport { eq, and, or, ne, sql, notInArray, desc } from "drizzle-orm";[m
 [m
 type Env = {[m
   RUNTIME?: string;[m
[36m@@ -714,14 +714,20 @@[m [madminRoutes.post("/level-validations/:userId/approve", async (c) => {[m
     const databaseUrl = getDatabaseUrl();[m
     const db = await getDatabase(databaseUrl);[m
 [m
[31m-    // Check if user exists and has pending validation[m
[32m+[m[32m    // Check if user exists and has pending or rejected validation[m
     const [user] = await db[m
       .select()[m
       .from(users)[m
[31m-      .where(and(eq(users.id, userId), eq(users.level_validation_status, "pending")));[m
[32m+[m[32m      .where(and([m
[32m+[m[32m        eq(users.id, userId),[m[41m [m
[32m+[m[32m        or([m
[32m+[m[32m          eq(users.level_validation_status, "pending"),[m
[32m+[m[32m          eq(users.level_validation_status, "rejected")[m
[32m+[m[32m        )[m
[32m+[m[32m      ));[m
 [m
     if (!user) {[m
[31m-      return c.json({ error: "User not found or no pending validation" }, 404);[m
[32m+[m[32m      return c.json({ error: "User not found or no validation request to approve" }, 404);[m
     }[m
 [m
     // Update user with approved level[m
